<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Note</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wjh624.github.io/"/>
  <updated>2018-09-30T16:32:46.722Z</updated>
  <id>http://wjh624.github.io/</id>
  
  <author>
    <name>wjh624</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装 go 语言开发环境（Ubuntu）</title>
    <link href="http://wjh624.github.io/2018/09/27/%E5%AE%89%E8%A3%85-go-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88Ubuntu%EF%BC%89/"/>
    <id>http://wjh624.github.io/2018/09/27/安装-go-语言开发环境（Ubuntu）/</id>
    <published>2018-09-27T05:05:51.000Z</published>
    <updated>2018-09-30T16:32:46.722Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><blockquote class="blockquote-center">Table of Contents</blockquote> <p><ul class="markdownIt-TOC"><li><a href="#1-%E5%AE%89%E8%A3%85%E7%BC%96%E8%BE%91%E5%99%A8vscode">1、安装编辑器（VSCode）</a></li><li><a href="#2-%E5%AE%89%E8%A3%85-golang">2、安装 golang</a></li><li><a href="#3-%E9%85%8D%E7%BD%AE-go-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">3、配置 Go 环境变量</a></li><li><a href="#4-%E8%BF%90%E8%A1%8C%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F">4、运行你的第一个程序</a></li><li><a href="#5-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-github-%E5%81%9A-go-%E5%B7%A5%E4%BD%9C%E5%8C%BA-%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">5、如何使用 Github 做 Go 工作区 的版本控制</a></li><li><a href="#6-%E4%B8%AD%E9%80%94%E5%87%BA%E7%8E%B0%E8%BF%87%E7%9A%84-bug">6、中途出现过的 Bug</a></li><li><a href="#7-reflect">7、Reflect</a></li></ul></p><p><strong>环境： Ubuntu 16.04 LTS 64bit</strong></p><h2 id="1-安装编辑器vscode"><a class="markdownIt-Anchor" href="#1-安装编辑器vscode"></a> 1、安装编辑器（VSCode）</h2><p>说明：编辑器更具个人喜好选择，这里只是尝试一下 VSCode 的使用</p><p><a href="https://code.visualstudio.com/docs/setup/linux" target="_blank" rel="noopener">官方说明：Running VS Code on Linux</a></p><ol><li><p><a href="https://go.microsoft.com/fwlink/?LinkID=760868" target="_blank" rel="noopener">下载 deb包</a></p></li><li><p>定位到安装包到目录并执行如下命令（这里不做解释了）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i &lt;file&gt;.deb</span><br><span class="line">sudo apt-get install -f <span class="comment"># Install dependencies</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-安装-golang"><a class="markdownIt-Anchor" href="#2-安装-golang"></a> 2、安装 golang</h2><p>说明：这里之前是参照了一些老师的指导，但是安装的有问题，建议多在网上找找，把思路看再行动，以下是曲折的尝试过程，建议看完再行动</p><p>借鉴感谢</p><p><a href="https://www.jianshu.com/p/5c71a088e6eb" target="_blank" rel="noopener">Linux系统编译安装Go1.9.2</a></p><ol><li><p><a href="https://golang.org/" target="_blank" rel="noopener">官网</a> <a href="https://golang.org/doc/install?download=go1.11.linux-amd64.tar.gz" target="_blank" rel="noopener">下载安装包 go1.11.linux-amd64.tar.gz</a></p></li><li><p>定位到安装包到目录并执行如下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf go1.<span class="number">8</span>.linux-amd64.tar.gz  -C /usr/local</span><br></pre></td></tr></table></figure></li><li><p>这里要格外注意到这里并没有安装完，只是解压到文件 /usr/local 下，还需要手动进行编译安装（如果没有编译后面还会出现 GOARCH 参数不对等各种问题）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/go/src <span class="comment"># src 是存放安装脚本的目录</span></span><br><span class="line">sudo ./make.bash <span class="comment"># 执行自带的安装脚本</span></span><br></pre></td></tr></table></figure></li><li><p>执行后发现报错</p><p>![](/home/zero/Desktop/Transfer station/Image/Go/go_install_bug3.png)</p><p><strong>Why</strong></p><p>编译GO 1.6版本以上的需要依赖GO 1.4版本的二进制，于是要先编译安装1.4版本</p><p><strong>Solve</strong></p><p>先到 Go 的 github 上下载 <a href="https://github.com/golang/go" target="_blank" rel="noopener">GO 的历代版本包</a>，然后将<strong>分支切换到 go1.4</strong>，之后执行如下命令进行安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /go</span><br><span class="line">git checkout go1.<span class="number">4</span></span><br><span class="line">cd /src</span><br><span class="line">sudo ./all.bash</span><br></pre></td></tr></table></figure></li><li><p>执行出现如下错误</p><p>![](/home/zero/Desktop/Transfer station/Image/Go/go1.4_install_bug.png)</p><p><strong>Why</strong></p><blockquote><p>导致上述问题的原因是：CGO_ENABLED: Controls cgo usage during the build. Set it to 1 to include all cgo related files, .c and .go file with “cgo” build directive, in the build. Set it to 0 to ignore them.</p><p>在构建过程中控制 cgo 的使用。当设置为1，在构建时，会包含所有 cgo 相关的文件，如带有 ”cgo” 编译指令的 .c 和 .go 文件。当设置为0，则忽略它们（即禁用 CGO）</p></blockquote><p><strong>Solve</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /go/src</span><br><span class="line">sudo CGO_ENABLED=<span class="number">0</span> ./make.bash</span><br></pre></td></tr></table></figure></li><li><p>重复执行之前第4步安装命令，Go1.4 安装成功</p><p>![go1.4_install_success](/home/zero/Desktop/Transfer station/Image/Go/go1.4_install_success.png)</p></li><li><p>重新执行之前第3步安装命令，Go1.9.1 安装成功，<strong>所以正确的步骤是5423</strong></p></li></ol><h2 id="3-配置-go-环境变量"><a class="markdownIt-Anchor" href="#3-配置-go-环境变量"></a> 3、配置 Go 环境变量</h2><p>说明：这里需要2个知识点 -&gt; Ubuntu 下配置文件 .profile .bashrc 等、环境变量访问，需要上网查阅完整知识，这里只解释相关步骤</p><p><strong>~/.bashrc 和 ~/.profile 一些理解</strong></p><ul><li><p>都是当前用户的配置文件，只在当前用户下产生作用</p></li><li><p>profile 只在登录系统时执行一次，而 bashrc 在每次打开终端的时候都会执行</p></li><li><p>如果想要更改后的 profile 产生作用，第一种是重新登录，第二种是 source ~/.profile，但是这个只对当前终端产生作用，在打开新的终端中 profile 的更改无效</p></li><li><p><strong>不知道为什么感觉，每次重新登录后，对 profile 的所有更改都无效，必须每次执行 source 才会有效</strong></p></li></ul><ol><li><p>~/.profile 文件的修改，执行以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.profile</span><br><span class="line">// 文件末尾添加以下内容</span><br><span class="line">export GOPATH=<span class="variable">$HOME</span>/gowork </span><br><span class="line"><span class="comment"># GOPATH 表示 Go 的工作目录，是存放源代码，库等东西的地方，可以有多个GOPATH</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="comment"># PATH 需要用 $PATH: 继承其他地方的 PATH 目录，不然后果很惨</span></span><br><span class="line">export GOBIN=<span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="comment"># GOBIN 是存放，执行 go install 执命令后产生的可执行文件的地方</span></span><br></pre></td></tr></table></figure><p>以上解释详见</p></li><li><p>重新记载<code>profile</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure></li><li><p>检查配置，执行 go env，注意 GOPATH GOBIN GOARCH</p><p>![go_env](/home/zero/Desktop/Transfer station/Image/Go/go_env.png)</p></li></ol><h2 id="4-运行你的第一个程序"><a class="markdownIt-Anchor" href="#4-运行你的第一个程序"></a> 4、运行你的第一个程序</h2><p>说明：请先阅读官方文档，<a href="https://go-zh.org/doc/code.html" target="_blank" rel="noopener">如何使用 Go 编程</a>，以下内容全部参照官方文档，只对其中部分内容做展示，见第5部分</p><h2 id="5-如何使用-github-做-go-工作区-的版本控制"><a class="markdownIt-Anchor" href="#5-如何使用-github-做-go-工作区-的版本控制"></a> 5、如何使用 Github 做 Go 工作区 的版本控制</h2><p>说明：在第4部分中，我们创建的源代码库目录是 $GOPATH/src/github.com/user/hello，会发现目录结构和 github 网站结构大致相同</p><ol><li><p>创建一个源代码库 Go</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="variable">$GOPATH</span>/src/github.com/user/Go</span><br></pre></td></tr></table></figure></li><li><p>创建 hello.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim hello.<span class="keyword">go</span></span><br><span class="line"># 输入以下内容</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Hello go in github!\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译运行 go install</p><p>说明：go install 后如果不加文件名，会执行当前目录下所有 go 源码文件，执行后会在 $GOPATH 目录中生成可执行文件 hello，<strong>如果出现问题，请检查 $GOPATH  目录是否正确，可以访问</strong></p></li><li><p>执行 hello 查看结果，<strong>这里可能会出现问题，因为无法复制问题没有图片，原因可能是 Ubuntu 终端下有一个命令是 hello，会输出 Hello world!，直接执行 hello 终端可能会认为你访问你个未安装的指令</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$GOBIN</span>/hello</span><br></pre></td></tr></table></figure></li><li><p>在 github 网站上创建仓库 Go</p><p>![go_github](/home/zero/Desktop/Transfer station/Image/Go/go_github.png)</p></li><li><p>终端下执行如下命令，连接到远程 github 仓库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"# Go"</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin https://github.com/wjh624/Go.git <span class="comment"># 此处是你的 SSH 的内容</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>输入用户名和密码 OK</p></li></ol><h2 id="6-中途出现过的-bug"><a class="markdownIt-Anchor" href="#6-中途出现过的-bug"></a> 6、中途出现过的 Bug</h2><p>说明：此处文本介绍，方便 Bug 问题搜索</p><p><strong>1、go intall: cannot install cross-compiled binaries when GOBIN is set</strong></p><p>![go_install_bug](/home/zero/Desktop/Transfer station/Image/Go/go_install_bug.png)</p><p>**When: ** 执行 go install 编译 hello.go</p><p>**Why: ** 在网上一直没找到相关问题的解决，按照翻译的中文，交叉编译问题查找，发现 Go 语言是可以实现交叉编译的（比如 linux 下运行 win go 文件），但是我运行的一直是 linux 下的啊，猜测是 <strong>$GOARCH=386  参数错误</strong>，为什么这个参数会错误呢，因为之前并没有完全安装和 Go 导致的（只是简单拷贝到目录，没有运行安装脚本），由此可见每一步都是有理由的，每一步都需谨慎，每一步都尽量保证可逆，每一个 Bug 出现都是有原因的啊，找到它</p><p>![goarch](/home/zero/Desktop/Transfer station/Image/Go/goarch.png)</p><p>**Solve:**改成 $GOARCH=amd64</p><p>**2、open /usr/local/go/bin/hello: permisson denied **</p><p>![go_install_bug2](/home/zero/Desktop/Transfer station/Image/Go/go_install_bug2.png)</p><p><strong>When :</strong> 执行 go install 编译 hello.go</p><p><strong>Why :</strong> 后来查资料的时候知道了 go intall 会在 bin 目录下生成可执行文件，这里显然就是 bin 目录无法访问，怎么能无法访问呢，花了好长时间才知道 $GOBIN 的目录错了，为什么会出现这个错误呢，因为之前安装 golong，看博客上配置 .bashrc，加了一堆内容，自己也没仔细搞懂，就加上了，哎还是那句话，弄懂每一步，记录每一步，每一个 bug 必定有前因后果，弄懂原理</p><p>**Solve: ** 去掉 .bashrc 文件中的之前添加的内容，配置的更改主要放在 profile 中</p><h2 id="7-reflect"><a class="markdownIt-Anchor" href="#7-reflect"></a> 7、Reflect</h2><p>一路曲折，问题很多，花了很长时间，但是好歹独立完成了</p><p>其实上面绝大部分问题都是可以避免的，或者说仔细想想很好解决的，花了很长时间的原因在于，我不是真正理解或者完全理解网络上博客那些步骤的意思，那些命令的意思，只是照猫画瓢，以至于后面会因为前面的纰漏出现很多问题，所以再给自己强调一下，每一步都要弄懂，每一步都要记录下来，每一步都要考虑可能后果，每一步尽量可逆，每一步都要谨慎啊（这里突然想到德润老板之前网上教我安装 Ubuntu 系统的时候，每一步都标号标出，甚至每一步不厌花时间给我讲清楚原理，是多么有用，很感谢）如果我能把那样方式用在这里也就不会出现这些问题了</p><p>还有比较致命的一点，<strong>当出现问题时总是想着网上搜索如何解决它，不是，我应该先想问题为什么会出现</strong>，只有明白出现的前因后果，才是懂得原理，才能更好的解决</p><p>还是每一步弄明白，尽可能了解相关知识后，再确认执行</p><p>这次过程中遇到的 Bug 还好都及时记下了，写的多了，下次会尽量精简吧</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Service Computing" scheme="http://wjh624.github.io/categories/Service-Computing/"/>
    
    
      <category term="Ubuntu" scheme="http://wjh624.github.io/tags/Ubuntu/"/>
    
      <category term="Go" scheme="http://wjh624.github.io/tags/Go/"/>
    
      <category term="开发环境" scheme="http://wjh624.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>使用 VirtualBox 让 PC 提供云桌面服务</title>
    <link href="http://wjh624.github.io/2018/09/14/%E4%BD%BF%E7%94%A8-VirtualBox-%E8%AE%A9-PC-%E6%8F%90%E4%BE%9B%E4%BA%91%E6%A1%8C%E9%9D%A2%E6%9C%8D%E5%8A%A1/"/>
    <id>http://wjh624.github.io/2018/09/14/使用-VirtualBox-让-PC-提供云桌面服务/</id>
    <published>2018-09-14T03:56:54.000Z</published>
    <updated>2018-09-14T16:33:02.627Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题外话：之前看到一个术语叫做<strong>专家盲点</strong>，就是刚开始学习的时候认为很难，有很多东西要学，等学会之后再来看着前的内容的时候会遗漏很多当时的问题</li></ul><p>​    ​此文作为一篇博客并不是很合格，因为并没有把我所有经历的过程写出来，当我大概了解之后才来做的，会少了当初很多莫名其妙的问题和体验，为此之后像作业这种一遍操作类的博客，我尽量学会边学边记，同时尽量保存图片</p><!--most--><p>[TOC]</p><h2 id="一-virtualbox"><a class="markdownIt-Anchor" href="#一-virtualbox"></a> 一、VirtualBox</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><ol><li>下载<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox</a></li><li>一路确定</li></ol><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><ol><li>配置 VirtualBox 虚拟机存储位置，避免找不到虚拟机存储位置，特别是消耗启动盘的宝贵空间<ul><li>VirtualBox菜单：管理-&gt;全局设定，常规页面</li></ul></li><li>创建虚拟机内部虚拟网络，使得 Vbox 内部虚拟机可以通过它，实现虚拟机之间、虚拟机与主机的通讯<ul><li>VirtualBox菜单：管理-&gt;主机网络管理器，创建一块虚拟网卡，网址分配：192.168.100.1/24</li><li>在主机 windows 命令行窗口输入 <code>ipconfig</code> 就可以看到 <code>VirtualBox Host-Only Network #?</code> 的网卡</li></ul></li></ol><h2 id="二-创建linux虚拟机以-centos-为案例"><a class="markdownIt-Anchor" href="#二-创建linux虚拟机以-centos-为案例"></a> 二、创建Linux虚拟机（以 Centos 为案例）</h2><h3 id="创建虚拟机"><a class="markdownIt-Anchor" href="#创建虚拟机"></a> 创建虚拟机</h3><ol><li><p>下载镜像文件<a href="https://www.centos.org/download/" target="_blank" rel="noopener">Centos</a></p></li><li><p>VirtualBox中新建虚拟机，一路确定</p><ol><li>存储&gt;=32G，避免以后扩展难</li><li>cpu&gt;=2</li><li>内存&gt;2G</li><li>显卡任意</li></ol></li><li><p>右键设置</p><ol><li>存储-&gt;没有盘片-&gt;选择下载好的镜像文件</li><li>网络-&gt;网卡一-&gt;连接方式-&gt;NAT + 网络-&gt;网卡二-&gt;连接方式-&gt;Host-Only-&gt;界面名称-&gt;<code>VirtualBox Host-Only Network #?</code></li><li>系统-&gt;启动顺序-&gt;光驱置顶</li></ol></li><li><p>双击运行，一路确定</p><ol><li>网络和主机名-&gt;更改下方主机名-&gt;网卡一打开连接 + 网卡二-&gt;打开连接-&gt;配置-&gt;IPV4配置-&gt;手动输入IPV4地址、子网掩码和网关(在cmd中ipconfig查看)</li><li>设置root密码和新建用户</li></ol></li></ol><h3 id="检查网络设置"><a class="markdownIt-Anchor" href="#检查网络设置"></a> 检查网络设置</h3><ul><li><p>先更新</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum  update</span><br><span class="line">// 如果遇到</span><br><span class="line">another app is currently holding the yum lock</span><br><span class="line">// 执行</span><br><span class="line">rm -f /var/run/yum.pid</span><br></pre></td></tr></table></figure></li><li><p>进入centos的网络管理工具</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmtui</span><br></pre></td></tr></table></figure><p>选择 Active a connection，将两个网卡都设置成activate，及右边显示的是deactivate**(此处需要注意的是右边的显示的状态表明按下后跳转到此状态，而不是当前所处的状态)**</p></li><li><p>安装网络连接命令的命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><p>输入<code>ifconfig</code>查看网络连接信息</p></li><li><p>检查虚拟机访问外网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>检查虚拟机访问主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 主机ip</span><br></pre></td></tr></table></figure><p><strong>注意：此处有个问题，网络上查找主机ip的方法无论是cmd还是设置里面大多是找的有网线连接的IPV4地址，而当你的电脑是连接wifi时，在以太网的地方看不到IPV4，需要到wifi里面找</strong></p><p>检查主机访问虚拟机，在主机终端中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 第二个网卡ip</span><br></pre></td></tr></table></figure></li></ul><h2 id="三-配置用远程桌面访问你的虚拟机"><a class="markdownIt-Anchor" href="#三-配置用远程桌面访问你的虚拟机"></a> 三、配置用远程桌面访问你的虚拟机</h2><ol><li><p>下载扩展包：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">Oracle VM VirtualBox Extension Pack</a></p></li><li><p><strong>关闭所有虚拟机</strong>，点击<code>管理-&gt;全局设定-&gt;扩展</code>，导入下载的扩展包</p></li><li><p>重启宿主机</p></li><li><p>设置-&gt;显示-&gt;远程连接-&gt;启用服务器-&gt;服务器端口号写一个较大的10001，当然必须是空闲的</p></li><li><p>windows 远程桌面连接 + 主机IP:10001(之前设置空闲端口号)</p><p><strong>注意：此处必须要确保虚拟机开机，外面的主机才能访问</strong>，还有一个比较坑的地方，远程访问用户时必须要输入密码，可我明明没有给用户设置密码，不得已专门去设置了一个密码后，才实现了连接</p></li></ol><h2 id="四-安装centos增强功能"><a class="markdownIt-Anchor" href="#四-安装centos增强功能"></a> 四、安装centos增强功能</h2><ol><li><p>安装kernel-devel and gcc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kernel-devel gcc</span><br></pre></td></tr></table></figure></li><li><p>设备-&gt;安装增强功能<img src="C:%5CUsers%5CWJH624%5CDesktop%5CSnipaste_2018-09-14_17-53-15.png" alt="Snipaste_2018-09-14_17-53-15"></p><p>what：明明文件夹中有相应文件，网上的解决方案大多都是图形化的，不得已安装图形化界面</p></li><li><p>安装图形化界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall &quot;GNOME Desktop&quot;</span><br><span class="line">// 默认命令行 systemctl set-default multi-user.target </span><br><span class="line">// 默认图形化桌面</span><br><span class="line">systemctl set-default graphical.target</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li><li><p>重启出现图形化界面后-&gt;双击桌面的光盘(如果没有考虑点击设备-安装增强功能)-&gt;出现文件夹-&gt;在终端中打开-&gt;执行<code>sudo sh ./VBoxLinuxAdditions.run</code></p></li></ol><p><a href="https://littlefish33.cn/servicecomputing/centos/#more" target="_blank" rel="noopener">小白上路借鉴小鱼博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;题外话：之前看到一个术语叫做&lt;strong&gt;专家盲点&lt;/strong&gt;，就是刚开始学习的时候认为很难，有很多东西要学，等学会之后再来看着前的内容的时候会遗漏很多当时的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    ​此文作为一篇博客并不是很合格，因为并没有把我所有经
      
    
    </summary>
    
    
      <category term="ServiceComputing" scheme="http://wjh624.github.io/tags/ServiceComputing/"/>
    
  </entry>
  
  <entry>
    <title>完全键盘流</title>
    <link href="http://wjh624.github.io/2018/09/13/%E5%AE%8C%E5%85%A8%E9%94%AE%E7%9B%98%E6%B5%81/"/>
    <id>http://wjh624.github.io/2018/09/13/完全键盘流/</id>
    <published>2018-09-13T09:41:31.000Z</published>
    <updated>2018-09-14T16:26:50.073Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="part1-从linux命令行开始"><a class="markdownIt-Anchor" href="#part1-从linux命令行开始"></a> Part1 - 从linux命令行开始</h2><a id="more"></a><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>关机</td><td>shutdown -h now/halt</td></tr><tr><td>重启</td><td>reboot</td></tr><tr><td>获得root权限</td><td>su root</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;part1-从linux命令行开始&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#part1-从linux命令行开始&quot;&gt;&lt;/a&gt; Part1 - 从linux命令行开始&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="http://wjh624.github.io/2018/09/03/my-first-blog/"/>
    <id>http://wjh624.github.io/2018/09/03/my-first-blog/</id>
    <published>2018-09-03T13:13:26.000Z</published>
    <updated>2018-09-04T14:32:46.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何搭建个人博客"><a class="markdownIt-Anchor" href="#如何搭建个人博客"></a> 如何搭建个人博客</h1><p>with hexo and github.page</p><p>[TOC]</p><a id="more"></a> ]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何搭建个人博客&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何搭建个人博客&quot;&gt;&lt;/a&gt; 如何搭建个人博客&lt;/h1&gt;
&lt;p&gt;with hexo and github.page&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wjh624.github.io/2018/09/03/hello-world/"/>
    <id>http://wjh624.github.io/2018/09/03/hello-world/</id>
    <published>2018-09-03T12:21:48.556Z</published>
    <updated>2018-09-04T13:54:53.454Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a> <h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
